import React, { useState } from 'react';

// Main App component which contains the Login Form
const App = () => {
  // 1. State for managing form inputs
  const [formData, setFormData] = useState({
    username: '',
    password: '',
  });

  // 2. State for managing validation messages
  const [message, setMessage] = useState('');

  // 3. State for handling loading/submission status (optional but good practice)
  const [isSubmitting, setIsSubmitting] = useState(false);

  /**
   * Handles changes to the input fields and updates the formData state.
   * @param {React.ChangeEvent<HTMLInputElement>} e - The change event object.
   */
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value,
    }));
    // Clear validation message when user starts typing
    setMessage('');
  };

  /**
   * Handles the form submission logic.
   * @param {React.FormEvent<HTMLFormElement>} e - The form submission event object.
   */
  const handleSubmit = (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setMessage('');

    const { username, password } = formData;

    // Basic Validation Check
    if (!username.trim() || !password.trim()) {
      setMessage('Username and password fields cannot be empty.');
      setIsSubmitting(false);
      return;
    }

    // Simulate API call or processing delay
    setTimeout(() => {
      // SUCCESS LOGIC: Log the credentials to the console
      console.log('--- FORM SUBMISSION SUCCESS ---');
      console.log('Username:', username);
      console.log('Password:', password); // NOTE: Never log real passwords in production!
      console.log('-------------------------------');
      
      setMessage('Login successful! Check the console for data.');
      setIsSubmitting(false);

      // Optionally clear the form
      // setFormData({ username: '', password: '' });

    }, 1000); // 1 second delay
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4 font-sans">
      <div className="w-full max-w-md bg-white shadow-2xl rounded-xl p-8 transform transition duration-500 hover:scale-[1.01] border border-gray-200">
        
        {/* Header */}
        <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-6">
          Member Login
        </h2>
        <p className="text-center text-sm text-gray-500 mb-8">
            Access your account with your credentials.
        </p>

        {/* Login Form */}
        <form onSubmit={handleSubmit} className="space-y-6">
          
          {/* Username Field */}
          <div>
            <label 
              htmlFor="username" 
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Username
            </label>
            <input
              id="username"
              name="username"
              type="text"
              required
              value={formData.username}
              onChange={handleInputChange}
              className="appearance-none block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 transition duration-150"
              placeholder="Enter your username"
              disabled={isSubmitting}
            />
          </div>

          {/* Password Field */}
          <div>
            <label 
              htmlFor="password" 
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Password
            </label>
            <input
              id="password"
              name="password"
              type="password"
              required
              value={formData.password}
              onChange={handleInputChange}
              className="appearance-none block w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 transition duration-150"
              placeholder="Enter your password"
              disabled={isSubmitting}
            />
          </div>

          {/* Validation/Feedback Message */}
          {message && (
            <div className={`p-3 rounded-lg text-sm font-medium ${message.includes('Error') || message.includes('empty') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
              {message}
            </div>
          )}

          {/* Submit Button */}
          <div>
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-md text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                'Sign In'
              )}
            </button>
          </div>
        </form>

      </div>
    </div>
  );
};

export default App;
