<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dockerized React App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState } = React;
        
        // Define the API URL for the backend (Use localhost:3001 for local testing)
        // In AWS deployment, this would be the Application Load Balancer (ALB) DNS name.
        const API_URL = 'http://localhost:3001'; 

        const App = () => {
            // Local state for the frontend message
            const [message, setMessage] = useState("Ready for Deployment!");
            // State for the backend response data
            const [backendData, setBackendData] = useState({ 
                instance: 'Awaiting call...', 
                hitCount: 0, 
                serverMessage: 'Press the button to connect!' 
            });
            const [isLoading, setIsLoading] = useState(false);

            const fetchBackendStatus = async () => {
                setIsLoading(true);
                try {
                    // Fetch status from the backend API endpoint
                    const response = await fetch(`${API_URL}/api/status`);
                    const data = await response.json();
                    
                    setBackendData({
                        instance: data.instance,
                        hitCount: data.hitCount,
                        serverMessage: data.message
                    });
                    setMessage("Connection successful!");

                } catch (error) {
                    setMessage(`Error connecting to backend: ${error.message}`);
                    setBackendData({ 
                        instance: 'Failed', 
                        hitCount: 0, 
                        serverMessage: 'Check if backend server is running.' 
                    });
                } finally {
                    setIsLoading(false);
                }
            };

            return (
                <div className="min-h-screen flex items-center justify-center bg-gray-900 p-4">
                    <div className="bg-white p-8 rounded-xl shadow-2xl text-center max-w-lg w-full">
                        <h1 className="text-4xl font-extrabold text-indigo-600 mb-4">
                            Full Stack Load Balancer Demo
                        </h1>
                        <p className="text-lg text-gray-700 mb-6">
                            Frontend Status: <span className="text-green-500 font-semibold">{message}</span>
                        </p>
                        
                        <div className="border border-indigo-200 bg-indigo-50 p-4 rounded-lg space-y-3 mb-6">
                             <p className="text-xl font-bold text-gray-800">
                                Server Message: <span className="text-pink-600">{backendData.serverMessage}</span>
                            </p>
                            <p className="text-lg font-mono text-gray-700">
                                Instance ID: <span className="font-semibold text-gray-900">{backendData.instance}</span>
                            </p>
                            <p className="text-lg font-mono text-gray-700">
                                Global Hit Count: <span className="font-semibold text-gray-900">{backendData.hitCount}</span>
                            </p>
                        </div>

                        <button
                            onClick={fetchBackendStatus}
                            disabled={isLoading}
                            className="w-full mt-6 px-6 py-3 bg-pink-500 text-white font-bold rounded-lg shadow-md hover:bg-pink-600 transition duration-150 transform hover:scale-105 disabled:opacity-50 disabled:cursor-wait"
                        >
                            {isLoading ? 'Connecting...' : 'Call API via Load Balancer'}
                        </button>
                        <p className="mt-4 text-xs text-gray-500">
                            (In a real deployment, repeated clicks would hit different backend instances.)
                        </p>
                    </div>
                </div>
            );
        };

        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);
    </script>
</body>
</html>
